<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-3.1.xsd">
              	              
    <mvc:annotation-driven />
    <!-- Indicamos el paquete base bajo el cual se encontrarán todos nuestros Controllers. -->
	<context:component-scan base-package="mx.sep.sajja.web.controller"/>
	
	<!-- Evita conflictos de URL en caso de que se opte por usar el path raíz en la configuración del DispatcherServlet de Spring -->
	<mvc:resources mapping="/static/**" location="/static/" />
	
	<!-- Un pequeño Controller que define Spring para intentar resolver vistas con el path de la petición que se atiende. -->
    <bean id="simpleController"
          class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />

	<!-- Le indicamos a Spring que UrlFilenameViewController intentará hacer su trabajo para todos los url's que se atiendan.
			Indicamos el orden en este debe intervenir. Con un orden de 5 basta para darle prioridad a todos los controller que creemos
			por sobre el UrlFilenameViewController. -->
    <bean id="proyectoSimpleHandler"
          class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"
          p:mappings="/**=simpleController"
          p:order="5"/>
              
    <!-- Definimos que nuestras vistas serán JSP's con soporte a JSTL bajo el directorio WEB-INF y con extensión .jsp -->
	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	    <property name="prefix" value="/WEB-INF/" />
	    <property name="suffix" value=".jsp" />
	</bean>          
	
	<!-- p:location="classpath*:mx/sep/sajja/reportes/jasper-sajja-config.xml" -->
    <bean class="org.springframework.web.servlet.view.XmlViewResolver"
          p:location="/WEB-INF/spring-config/jasper-sajja-config.xml"
          p:order="0"/>	
	
	<!-- Añadimos un convertidor de mensajes json que entran y salen de nuestros controllers. -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="messageConverters">
	        <util:list>
	            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
	        </util:list>
	    </property>
	    <property name="order" value="0" />
	</bean>	
	
	<!-- Utilería de spring para aceptar subida de archivos. -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">     
		<property name="maxUploadSize" value="-1"/>
	</bean> 	
	
	<!-- El locale será resuelto con los encabezados de cada petición. En este caso dependerá de la configuración del navegador. -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"/>
	
	<!-- Un manejador de errores propio con mecanismos de notificación y soporte a mensajes json. -->
    <bean class="mx.sep.sajja.web.util.ManejadorErroresJson">
        <property name="nombreProfileDesarrollo" value="desarrollo" />
        <property name="mapeoExcepciones">
            <map>
                <!-- Para asignar un notificador a una Excepción. Si no se establece un notificador
                para una excepción más específica se elige el notificador de la super clase más cercana
                en la jerarquía de herencia.-->
                <entry key="mx.sep.sajja.servicios.util.ErrorNegocio" value-ref="notificacionLog"></entry>

                <!-- En este caso no se elige notificador. Si se especifica un servicioNotificaciónDefault
                se usará este, de otro modo no se notificará el error. El error hacia presentación siempre
                se genera.-->
                <entry key="mx.sep.sajja.servicios.util.ErrorInfraestructura" value=""></entry>

                <entry key="java.lang.RuntimeException" value=""></entry>
            </map>
        </property>
        <property name="mapeoNivelErrores">
            <map>
                <!-- Se coloca en value el nivel del error generado. En realidad se puede colocar la
                leyenda que se desee -->
                <entry key="mx.sep.sajja.servicios.util.ErrorNegocio" value="ERROR DE NEGOCIO"></entry>
                <entry key="mx.sep.sajja.servicios.util.ErrorInfraestructura" value="ERROR GRAVE"></entry>
                <entry key="java.lang.RuntimeException" value="ERROR"></entry>
            </map>
        </property>
        <property name="servicioNotificacionDefault" ref="notificacionLog" />
    </bean>

    <bean id="notificacionLog" class="mx.sep.sajja.web.util.ServicioNotificacionLog" />
</beans>